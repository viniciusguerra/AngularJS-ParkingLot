//IIFE
(function(){
	'use strict'
	
	angular.module('ParkingLotApp')
	.provider('PlateManagerService', PlateManagerServiceProvider)
	.provider('MetaService', MetaServiceProvider)
	.service('PlateDetailService', PlateDetailService);

	//Providers
	function PlateManagerServiceProvider(){

		this.defaults = {

			parkingServices: [],
			archivedPlates: [],
			dueCalculators: []

		};

		//Dependency Injection within Service generated by Provider is done at $get
		this.$get = ['$localStorage', 'lodash', function($localStorage, lodash){

			var service = new PlateManagerService($localStorage.parkingServices ?
													$localStorage.parkingServices : this.defaults.parkingServices,
													$localStorage.archivedPlates ?
													$localStorage.archivedPlates : this.defaults.archivedPlates,
													this.defaults.dueCalculators,
													$localStorage, lodash);

			return service;

		}];
	}

	function MetaServiceProvider(){

		this.defaults = {

			companyName: ''

		};

		this.$get = function(){

			var service = new MetaService(this.defaults.companyName);

			return service;
		};
	}

	//Services		
	function PlateManagerService(parkingServices, archivedPlates, dueCalculators, $localStorage, lodash){

		this.$storage = $localStorage;		

		//initializes parking services with the data saved at LocalStorage
		//if there is no data, it is initialized with the templates in Config
		this.$storage.parkingServices = parkingServices;

		//archived plates list for when they are removed
		this.$storage.archivedPlates = archivedPlates;

		//here are the service specific calculators used to calculate
		//the due price
		this.dueCalculators = dueCalculators;

		//returns all plates of all services in a {service : plate} array
		this.getAllPlates = function(){

			var allPlates = [];

			for(var i = 0; i < this.$storage.parkingServices.length; i++)
			{
				for(var j = 0; j < this.$storage.parkingServices[i].plates.length; j++)
				{
					var _service = this.$storage.parkingServices[i];
					var _plate = this.$storage.parkingServices[i].plates[j];

					allPlates.push({service: _service, plate: _plate});
				}
			}

			return allPlates;
		}

		this.idExists = function(id){

			var allPlates = this.getAllPlates();

			var result = false;

			for(var i = 0; i < allPlates.length; i++)
			{
				if(allPlates[i].plate.id === id)
				{
					result = true;
				}
			}

			return result;
		}

		//finds the ParkingService for a plate and uses it's calculator to find
		//the due price depending on the plate's events
		this.calculateDue = function(plate){

			var service = this.getServiceFromPlate(plate);

			this.dueCalculators[service.type](plate, service);

		}

		//updates due prices for all the plates on all the services
		this.calculateAllDues = function(){

			for(var i = 0 ; i < this.$storage.parkingServices.length ; i++)
			{
				for(var j = 0 ; j < this.$storage.parkingServices[i].plates.length ; j++)
				{
					if(this.$storage.parkingServices[i].plates[j].events.length !== 0)
					{
						this.calculateDue(this.$storage.parkingServices[i].plates[j]);
					}
				}
			}
		}

		this.addPlate = function(plate, serviceType){

			if(this.idExists(plate.id))				
				throw 'id';

			if(serviceType.plates && serviceType.plates.length < serviceType.capacity)
			{
				serviceType.plates.push(plate);
			}
			else
			{
				throw 'capacity';
			}				
		};

		//checks if the given plate is archived
		this.isPlateArchived = function(plate){

			var result = false;

			this.$storage.archivedPlates.forEach(function(archive){

				if(lodash.isEqual(plate, archive.plate))
				{
					result = true;
				}

			});

			return result;
		}

		//archives an active plate or removes it from the archive
		this.removePlate = function(_plate){

			var isArchived = this.isPlateArchived(_plate);

			var storage = this.$storage;

			//removes plate from archive
			if(isArchived === true)
			{
				//removes plate from archive
				this.$storage.archivedPlates.forEach(function(archive, i){

					if(archive.plate === _plate)
					{
						storage.archivedPlates.splice(i, 1);

						return;
					}

				});

			}
			//archives plate
			else
			{
				//archives the plate
				var archive = {service: this.getServiceFromPlate(_plate), plate: _plate};

				this.$storage.archivedPlates.push(archive);

				//removes plate from that service's plate list
				for(var i = 0; i < this.$storage.parkingServices.length; i++)
				{
					for(var j = 0; j < this.$storage.parkingServices[i].plates.length; j++)
					{
						if(this.$storage.parkingServices[i].plates[j] === _plate)
						{
							this.$storage.parkingServices[i].plates.splice(j, 1);

							return;
						}
					}
				}
			}
		};

		this.getServiceFromPlate = function(plate){

			for(var i = 0; i < this.$storage.parkingServices.length; i++)
			{
				if(this.$storage.parkingServices[i].plates.find(function(item){
					return item === plate;
				}))
				{
					return this.$storage.parkingServices[i];
				}
			}

		}

		this.resetPlates = function(){

			for(var i = 0; i < this.$storage.parkingServices.length; i++)
			{
				delete this.$storage.parkingServices[i].plates;
			}
		}

	};

	PlateDetailService.$inject = ['$location'];
	function PlateDetailService($location){

		this.plate;

		this.isArchived;

		this.ShowDetails = function(plate, isArchived){

			this.plate = plate;

			this.isArchived = isArchived;

			$location.path('/details');

		};

		this.IsExitDateValid = function(eventArg){

			var valid = false;

			var exitDate = new Date(eventArg.exitDateTime);

			var time = exitDate.getTime();

			var valid = time !== undefined && !isNaN(time) && time !== 0;

			return valid;

		}
	}

	function MetaService(companyName){

		this.companyName = companyName;

	}

})();